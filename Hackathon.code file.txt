Frontend code created by React.js and Javascript :


import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { getInstructorClassStats, getCourses } from '../services/api';

function InstructorDashboard({ user, onLogout }) {
  const [stats, setStats] = useState(null);
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    async function fetchData() {
      try {
        const [statsData, coursesData] = await Promise.all([
          getInstructorClassStats(user.id),
          getCourses(user.id)
        ]);
        setStats(statsData);
        setCourses(coursesData);
      } catch (err) {
        setError('Failed to load instructor data');
        console.error(err);
      } finally {
        setLoading(false);
      }
    }
    
    fetchData();
  }, [user.id]);

  const handleLogout = () => {
    onLogout();
    navigate('/');
  };

  if (loading) {
    return <div className="container mt-5 text-center">Loading...</div>;
  }

  return (
    <div className="container mt-4">
      <div className="row mb-4">
        <div className="col d-flex justify-content-between align-items-center">
          <h2>Instructor Dashboard</h2>
          <button onClick={handleLogout} className="btn btn-outline-danger">
            <i className="fas fa-sign-out-alt me-2"></i>Logout
          </button>
        </div>
      </div>

      <div className="row mb-4">
        <div className="col">
          <div className="card shadow-sm">
            <div className="card-body">
              <h5 className="card-title">Welcome, {user.name}</h5>
              <p className="card-text">Faculty ID: {user.facultyId || 'N/A'}</p>
              <p className="card-text">Email: {user.email}</p>
            </div>
          </div>
        </div>
      </div>
      
      {error && (
        <div className="alert alert-danger" role="alert">
          {error}
        </div>
      )}

      {stats && (
        <div className="row mb-4">
          <div className="col-md-4 mb-3">
            <div className="card shadow-sm bg-light">
              <div className="card-body text-center">
                <h5 className="card-title">Total Courses</h5>
                <p className="card-text fs-1">{stats.totalCourses}</p>
              </div>
            </div>
          </div>
          <div className="col-md-4 mb-3">
            <div className="card shadow-sm bg-primary text-white">
              <div className="card-body text-center">
                <h5 className="card-title">Total Classes</h5>
                <p className="card-text fs-1">{stats.totalClasses}</p>
              </div>
            </div>
          </div>
          <div className="col-md-4 mb-3">
            <div className="card shadow-sm bg-info text-white">
              <div className="card-body text-center">
                <h5 className="card-title">Total Students</h5>
                <p className="card-text fs-1">{stats.totalStudents}</p>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="row mb-4">
        <div className="col">
          <div className="card shadow-sm">
            <div className="card-header">
              <h5 className="mb-0">Your Courses</h5>
            </div>
            <div className="card-body">
              {courses.length === 0 ? (
                <p className="text-muted">No courses found.</p>
              ) : (
                <ul className="list-group">
                  {courses.map(course => (
                    <li key={course.id} className="list-group-item d-flex justify-content-between align-items-center">
                      {course.name}
                      <span className="badge bg-primary rounded-pill">
                        {course.students} students
                      </span>
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="row mb-4">
        <div className="col">
          <div className="d-grid gap-3">
            <Link to="/generate-qr" className="btn btn-primary btn-lg">
              <i className="fas fa-qrcode me-2"></i>Generate QR Code for Class
            </Link>
            <Link to="/history" className="btn btn-secondary btn-lg">
              <i className="fas fa-history me-2"></i>View Attendance Records
            </Link>
            <Link to="/profile" className="btn btn-info btn-lg">
              <i className="fas fa-user-edit me-2"></i>Manage Profile
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}

export default InstructorDashboard;







Backend code created by Java:

package com.attendanceapp

import android.content.Intent
import android.os.Bundle
import android.widget.Button
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import com.attendanceapp.util.SharedPrefManager

class MainActivity : AppCompatActivity() {

    private lateinit var tvWelcome: TextView
    private lateinit var btnScan: Button
    private lateinit var btnHistory: Button
    private lateinit var btnProfile: Button
    private lateinit var btnLogout: Button
    private lateinit var sharedPrefManager: SharedPrefManager

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        sharedPrefManager = SharedPrefManager(this)

        // Check if user is logged in
        if (!sharedPrefManager.isLoggedIn()) {
            val intent = Intent(this, LoginActivity::class.java)
            startActivity(intent)
            finish()
            return
        }

        // Initialize views
        tvWelcome = findViewById(R.id.tvWelcome)
        btnScan = findViewById(R.id.btnScan)
        btnHistory = findViewById(R.id.btnHistory)
        btnProfile = findViewById(R.id.btnProfile)
        btnLogout = findViewById(R.id.btnLogout)

        // Set welcome message
        val student = sharedPrefManager.getStudent()
        tvWelcome.text = "Welcome, ${student.name}"

        // Set click listeners
        btnScan.setOnClickListener {
            startActivity(Intent(this, ScanActivity::class.java))
        }

        btnHistory.setOnClickListener {
            startActivity(Intent(this, AttendanceHistoryActivity::class.java))
        }

        btnProfile.setOnClickListener {
            startActivity(Intent(this, ProfileActivity::class.java))
        }

        btnLogout.setOnClickListener {
            sharedPrefManager.clear()
            startActivity(Intent(this, LoginActivity::class.java))
            finish()
        }
    }
}







package com.attendanceapp

import android.Manifest
import android.annotation.SuppressLint
import android.content.pm.PackageManager
import android.location.Location
import android.os.Bundle
import android.view.View
import android.widget.Button
import android.widget.ProgressBar
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.CameraSelector
import androidx.camera.core.ImageAnalysis
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.attendanceapp.api.ApiClient
import com.attendanceapp.model.Attendance
import com.attendanceapp.model.QRData
import com.attendanceapp.util.DatabaseHelper
import com.attendanceapp.util.LocationUtil
import com.attendanceapp.util.NetworkUtil
import com.attendanceapp.util.QRCodeAnalyzer
import com.attendanceapp.util.SharedPrefManager
import com.google.gson.Gson
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.Date

class ScanActivity : AppCompatActivity() {

    private lateinit var cameraPreview: PreviewView
    private lateinit var tvStatus: TextView
    private lateinit var progressBar: ProgressBar
    private lateinit var btnRescan: Button
    private lateinit var cameraExecutor: ExecutorService
    private lateinit var locationUtil: LocationUtil
    private lateinit var dbHelper: DatabaseHelper
    private lateinit var sharedPrefManager: SharedPrefManager
    
    private var isScanning = true
    private val PERMISSIONS_REQUEST_CODE = 10
    private val REQUIRED_PERMISSIONS = arrayOf(
        Manifest.permission.CAMERA,
        Manifest.permission.ACCESS_FINE_LOCATION
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_scan)

        // Initialize views
        cameraPreview = findViewById(R.id.cameraPreview)
        tvStatus = findViewById(R.id.tvStatus)
        progressBar = findViewById(R.id.progressBar)
        btnRescan = findViewById(R.id.btnRescan)

        // Initialize utilities
        locationUtil = LocationUtil(this)
        dbHelper = DatabaseHelper(this)
        sharedPrefManager = SharedPrefManager(this)
        cameraExecutor = Executors.newSingleThreadExecutor()

        // Set click listener for re-scan button
        btnRescan.setOnClickListener {
            isScanning = true
            tvStatus.text = "Scanning..."
            tvStatus.setTextColor(ContextCompat.getColor(this, android.R.color.black))
            btnRescan.visibility = View.GONE
            startCamera()
        }

        // Check permissions
        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, PERMISSIONS_REQUEST_CODE
            )
        }
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(baseContext, it) == PackageManager.PERMISSION_GRANTED
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == PERMISSIONS_REQUEST_CODE) {
            if (allPermissionsGranted()) {
                startCamera()
            } else {
                Toast.makeText(
                    this,
                    "Permissions not granted by the user.",
                    Toast.LENGTH_SHORT
                ).show()
                finish()
            }
        }
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val preview = Preview.Builder()
                .build()
                .also {
                    it.setSurfaceProvider(cameraPreview.surfaceProvider)
                }

            val imageAnalyzer = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()
                .also {
                    it.setAnalyzer(cameraExecutor, QRCodeAnalyzer { qrCode ->
                        if (isScanning) {
                            isScanning = false
                            processQRCode(qrCode)
                        }
                    })
                }

            try {
                cameraProvider.unbindAll()
                cameraProvider.bindToLifecycle(
                    this, CameraSelector.DEFAULT_BACK_CAMERA, preview, imageAnalyzer
                )

            } catch (exc: Exception) {
                Toast.makeText(
                    this,
                    "Camera use case binding failed: ${exc.message}",
                    Toast.LENGTH_SHORT
                ).show()
            }

        }, ContextCompat.getMainExecutor(this))
    }

    @SuppressLint("MissingPermission")
    private fun processQRCode(qrContent: String) {
        runOnUiThread {
            progressBar.visibility = View.VISIBLE
            tvStatus.text = "Processing QR code..."
        }

        try {
            // Parse QR code data (expected format: JSON with classId, locationLat, locationLng, radius)
            val qrData = Gson().fromJson(qrContent, QRData::class.java)
            
            // Get current location
            locationUtil.getCurrentLocation { location ->
                if (location != null) {
                    verifyLocationAndMarkAttendance(qrData, location)
                } else {
                    runOnUiThread {
                        progressBar.visibility = View.GONE
                        tvStatus.text = "Failed to get your location. Please try again."
                        tvStatus.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))
                        btnRescan.visibility = View.VISIBLE
                    }
                }
            }
        } catch (e: Exception) {
            runOnUiThread {
                progressBar.visibility = View.GONE
                tvStatus.text = "Invalid QR code. Please try again."
                tvStatus.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))
                btnRescan.visibility = View.VISIBLE
            }
        }
    }

    private fun verifyLocationAndMarkAttendance(qrData: QRData, currentLocation: Location) {
        // Create location object for the required attendance location
        val targetLocation = Location("qrcode")
        targetLocation.latitude = qrData.locationLat
        targetLocation.longitude = qrData.locationLng

        // Calculate distance between current location and required location
        val distance = currentLocation.distanceTo(targetLocation)

        if (distance <= qrData.radius) {
            // User is within the required radius - mark attendance
            markAttendance(qrData.classId, currentLocation)
        } else {
            runOnUiThread {
                progressBar.visibility = View.GONE
                tvStatus.text = "You are not at the required location. " +
                        "You are ${distance.toInt()} meters away from the required location."
                tvStatus.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))
                btnRescan.visibility = View.VISIBLE
            }
        }
    }

    private fun markAttendance(classId: String, location: Location) {
        val student = sharedPrefManager.getStudent()
        val timestamp = System.currentTimeMillis()
        
        // Create attendance object
        val attendance = Attendance(
            id = 0, // This will be set by the database
            studentId = student.id,
            classId = classId,
            timestamp = timestamp,
            latitude = location.latitude,
            longitude = location.longitude,
            synced = false
        )

        // Save attendance locally first
        val attendanceId = dbHelper.addAttendance(attendance)
        
        if (attendanceId > 0) {
            attendance.id = attendanceId.toInt()
            
            // Try to sync with server if online
            if (NetworkUtil.isNetworkAvailable(this)) {
                syncAttendance(attendance)
            } else {
                // Will be synced later
                runOnUiThread {
                    progressBar.visibility = View.GONE
                    tvStatus.text = "Attendance marked successfully (offline)!\n" +
                            "It will be synced when you're back online."
                    tvStatus.setTextColor(ContextCompat.getColor(this, android.R.color.holo_green_dark))
                    btnRescan.visibility = View.VISIBLE
                }
            }
        } else {
            runOnUiThread {
                progressBar.visibility = View.GONE
                tvStatus.text = "Failed to save attendance. Please try again."
                tvStatus.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))
                btnRescan.visibility = View.VISIBLE
            }
        }
    }

    private fun syncAttendance(attendance: Attendance) {
        val call = ApiClient.instance.markAttendance(
            attendance.studentId,
            attendance.classId,
            attendance.timestamp,
            attendance.latitude,
            attendance.longitude
        )
        
        call.enqueue(object : Callback<Void> {
            override fun onResponse(call: Call<Void>, response: Response<Void>) {
                if (response.isSuccessful) {
                    // Update local record to mark as synced
                    dbHelper.markAttendanceAsSynced(attendance.id)
                    
                    runOnUiThread {
                        progressBar.visibility = View.GONE
                        tvStatus.text = "Attendance marked successfully and synced!"
                        tvStatus.setTextColor(ContextCompat.getColor(this@ScanActivity, android.R.color.holo_green_dark))
                        btnRescan.visibility = View.VISIBLE
                    }
                } else {
                    runOnUiThread {
                        progressBar.visibility = View.GONE
                        tvStatus.text = "Attendance marked locally, but failed to sync with server. " +
                                "It will be synced later."
                        tvStatus.setTextColor(ContextCompat.getColor(this@ScanActivity, android.R.color.holo_orange_dark))
                        btnRescan.visibility = View.VISIBLE
                    }
                }
            }

            override fun onFailure(call: Call<Void>, t: Throwable) {
                runOnUiThread {
                    progressBar.visibility = View.GONE
                    tvStatus.text = "Attendance marked locally, but failed to sync with server. " +
                            "It will be synced later."
                    tvStatus.setTextColor(ContextCompat.getColor(this@ScanActivity, android.R.color.holo_orange_dark))
                    btnRescan.visibility = View.VISIBLE
                }
            }
        })
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }
}

// QR Code Analyzer class
package com.attendanceapp.util

import androidx.camera.core.ImageAnalysis
import androidx.camera.core.ImageProxy
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.barcode.common.Barcode
import com.google.mlkit.vision.common.InputImage
import java.util.concurrent.TimeUnit

class QRCodeAnalyzer(private val onQRCodeScanned: (String) -> Unit) : ImageAnalysis.Analyzer {
    private var lastAnalyzedTimestamp = 0L
    
    override fun analyze(image: ImageProxy) {
        val currentTimestamp = System.currentTimeMillis()
        
        // Process every 500 milliseconds to avoid overwhelming
        if (currentTimestamp - lastAnalyzedTimestamp >= TimeUnit.MILLISECONDS.toMillis(500)) {
            
            image.image?.let { mediaImage ->
                val inputImage = InputImage.fromMediaImage(mediaImage, image.imageInfo.rotationDegrees)
                
                val scanner = BarcodeScanning.getClient()
                scanner.process(inputImage)
                    .addOnSuccessListener { barcodes ->
                        for (barcode in barcodes) {
                            if (barcode.valueType == Barcode.TYPE_TEXT) {
                                barcode.rawValue?.let { value ->
                                    onQRCodeScanned(value)
                                }
                            }
                        }
                    }
                    .addOnCompleteListener {
                        image.close()
                    }
            }
            
            lastAnalyzedTimestamp = currentTimestamp
        } else {
            image.close()
        }
    }
}
